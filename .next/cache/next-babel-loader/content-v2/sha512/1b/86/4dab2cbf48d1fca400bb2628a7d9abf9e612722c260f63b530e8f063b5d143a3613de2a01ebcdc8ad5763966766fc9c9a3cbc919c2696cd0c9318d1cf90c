{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState } from 'react';\nimport AddressCard from '../AddressCard';\nimport styles from './AddressDetails.module.scss';\nimport { useRouter } from 'next/router';\nimport { Collapse, Button, CardBody, Card } from 'reactstrap';\nimport Link from 'next/link';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { profiles_url, orders_url } from '../../../../apiVariables';\n\nvar Address = /*#__PURE__*/function (_Component) {\n  _inherits(Address, _Component);\n\n  var _super = _createSuper(Address);\n\n  function Address() {\n    var _this;\n\n    _classCallCheck(this, Address);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      addressType: 0,\n      modal: false,\n      addressList: [],\n      isOpen: false,\n      formField: {\n        name: \"\",\n        phoneNumber: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        pincode: \"\",\n        landmark: \"\"\n      },\n      selectedAddressindex: null,\n      selectedAddress: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAddress\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var addressList, userDetail;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              addressList = _this.state.addressList;\n              userDetail = _this.props.userDetail;\n              _context.next = 4;\n              return axios.get(\"\".concat(profiles_url, \"/address/user/\").concat(userDetail.userId)).then(function (res) {\n                var obj = res.data.data;\n                addressList = res.data.data;\n\n                _this.setState({\n                  addressList: addressList\n                }); // this.props.dispatch(addressList)\n                // this.props.dispatch(productList(res.data.data.list))\n\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddAddress\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _this$state, addressList, formField, addressType, userDetail, data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$state = _this.state, addressList = _this$state.addressList, formField = _this$state.formField, addressType = _this$state.addressType;\n              userDetail = _this.props.userDetail;\n              data = {\n                userId: userDetail.userId,\n                addressName: formField.name,\n                addressMobile: formField.phoneNumber,\n                address: formField.address,\n                city: formField.city,\n                state: formField.state,\n                pinCode: formField.pincode,\n                landMark: formField.landmark,\n                type: addressType\n              };\n              _context2.next = 5;\n              return axios.post(\"\".concat(profiles_url, \"/address\"), data).then(function (res) {\n                var obj = res.data.data;\n                addressList = res.data.data;\n                formField = {\n                  name: \"\",\n                  phoneNumber: \"\",\n                  address: \"\",\n                  city: \"\",\n                  state: \"\",\n                  pincode: \"\",\n                  landmark: \"\"\n                };\n\n                _this.setState({\n                  formField: formField,\n                  addressList: addressList\n                });\n\n                _this.toggle1(); // this.props.dispatch(addressList)\n                // this.props.dispatch(productList(res.data.data.list))\n\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddressType0\", function () {\n      _this.setState({\n        addressType: 0\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddressType1\", function () {\n      _this.setState({\n        addressType: 1\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddressType2\", function () {\n      _this.setState({\n        addressType: 2\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggle\", function () {\n      var modal = _this.state.modal;\n      modal = !modal;\n\n      _this.setState({\n        modal: modal\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggle1\", function () {\n      var isOpen = _this.state.isOpen;\n      isOpen = !isOpen;\n\n      _this.setState({\n        isOpen: isOpen\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      var formField = _this.state.formField;\n      formField[e.target.name] = e.target.value;\n\n      _this.setState({\n        formField: formField\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelectAddress\", function (index, address) {\n      var _this$state2 = _this.state,\n          selectedAddressindex = _this$state2.selectedAddressindex,\n          selectedAddress = _this$state2.selectedAddress;\n      selectedAddressindex = index;\n      selectedAddress = address;\n      console.log(\"sdfgghfhfgh\", index, address);\n\n      _this.setState({\n        selectedAddressindex: selectedAddressindex,\n        selectedAddress: selectedAddress\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePlaceOrder\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _this$state3, addressList, formField, addressType, selectedAddress, _this$props, userDetail, prescription, chooseMedicines, prescriptionUrl, data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this$state3 = _this.state, addressList = _this$state3.addressList, formField = _this$state3.formField, addressType = _this$state3.addressType, selectedAddress = _this$state3.selectedAddress;\n              _this$props = _this.props, userDetail = _this$props.userDetail, prescription = _this$props.prescription, chooseMedicines = _this$props.chooseMedicines;\n              prescriptionUrl = prescription.uploadPrescription.map(function (data, index) {\n                return data.url;\n              });\n              data = {\n                \"prescriptionUrls\": prescriptionUrl,\n                \"dosageDuration\": Number(chooseMedicines.chooseMedicine),\n                \"address\": selectedAddress.address,\n                \"addressName\": selectedAddress.addressName,\n                \"addressMobile\": selectedAddress.addressMobile,\n                \"addressCity\": selectedAddress.city,\n                \"addressState\": selectedAddress.state,\n                \"addressPincode\": String(selectedAddress.pinCode),\n                \"addressLandmark\": selectedAddress.landMark,\n                \"addressType\": selectedAddress.type == 0 ? \"Home\" : selectedAddress.type == 1 ? \"Office\" : \"Other\",\n                \"adminStatus\": 0,\n                \"userStatus\": 0,\n                \"orderType\": 0,\n                \"items\": []\n              };\n              _context3.next = 6;\n              return axios.post(\"\".concat(orders_url, \"/order\"), data).then(function (res) {\n                _this.props.handleSubmitedOrder(); // this.props.dispatch(addressList)\n                // this.props.dispatch(productList(res.data.data.list))\n\n              });\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmitCall\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var _this$state4, addressList, formField, addressType, selectedAddress, _this$props2, userDetail, prescription, chooseMedicines, prescriptionUrl, data;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this$state4 = _this.state, addressList = _this$state4.addressList, formField = _this$state4.formField, addressType = _this$state4.addressType, selectedAddress = _this$state4.selectedAddress;\n              _this$props2 = _this.props, userDetail = _this$props2.userDetail, prescription = _this$props2.prescription, chooseMedicines = _this$props2.chooseMedicines;\n              prescriptionUrl = prescription.uploadPrescription.map(function (data, index) {\n                return data.url;\n              });\n              data = {\n                \"prescriptionUrls\": prescriptionUrl,\n                \"address\": selectedAddress.address,\n                \"addressName\": selectedAddress.addressName,\n                \"addressMobile\": selectedAddress.addressMobile,\n                \"addressCity\": selectedAddress.city,\n                \"addressState\": selectedAddress.state,\n                \"addressPincode\": String(selectedAddress.pinCode),\n                \"addressLandmark\": selectedAddress.landMark,\n                \"addressType\": selectedAddress.type == 0 ? \"Home\" : selectedAddress.type == 1 ? \"Office\" : \"Other\",\n                \"adminStatus\": 0,\n                \"userStatus\": 0,\n                \"orderType\": 2,\n                \"items\": []\n              };\n              _context4.next = 6;\n              return axios.post(\"\".concat(orders_url, \"/order\"), data).then(function (res) {\n                _this.props.handleSubmitedOrder(); // this.props.dispatch(addressList)\n                // this.props.dispatch(productList(res.data.data.list))\n\n              });\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    })));\n\n    return _this;\n  }\n\n  _createClass(Address, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props.userDetail, \"saasdfasdsgfs\");\n      this.getAddress();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state5 = this.state,\n          formField = _this$state5.formField,\n          selectedAddressindex = _this$state5.selectedAddressindex,\n          selectedAddress = _this$state5.selectedAddress;\n      var name = formField.name,\n          phoneNumber = formField.phoneNumber,\n          address = formField.address,\n          city = formField.city,\n          state = formField.state,\n          pincode = formField.pincode,\n          landmark = formField.landmark,\n          addressType = formField.addressType;\n      return __jsx(\"div\", {\n        className: styles.addressDetails\n      }, __jsx(\"h2\", null, \"3.Address Details\"), __jsx(\"div\", {\n        className: \"container\"\n      }, __jsx(\"p\", null, \"Saved Addrss Details\"), __jsx(\"div\", {\n        className: \"\".concat(styles.addressCards, \" col-md-12\")\n      }, this.state.addressList.map(function (address, ind) {\n        {\n          console.log(\"sadfafgsggh\", address, ind, _this2.state.addressList);\n        }\n        return __jsx(React.Fragment, null, __jsx(AddressCard, {\n          index: ind,\n          address: address,\n          selectedAddress: selectedAddressindex,\n          selectAddress: function selectAddress() {\n            return _this2.handleSelectAddress(ind, address);\n          }\n        }));\n      })), __jsx(\"div\", {\n        className: \"col\"\n      }, __jsx(\"div\", {\n        className: styles.addressItem\n      }, __jsx(\"div\", {\n        onClick: this.toggle1,\n        className: \"\".concat(styles.deliverFlip, \" col-md-12\")\n      }, __jsx(\"p\", null, \"Deliver to new address\"), __jsx(\"img\", {\n        src: '/down.png'\n      }))), __jsx(Collapse, {\n        className: styles.addForm,\n        isOpen: this.state.isOpen\n      }, __jsx(\"p\", null, \"Address Details\"), __jsx(\"div\", null, __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-md-6 form-group mb-3\"\n      }, __jsx(\"label\", {\n        className: \"form-label\"\n      }, \"Name\"), __jsx(\"input\", {\n        onChange: this.handleChange,\n        type: \"name\",\n        value: name,\n        name: \"name\",\n        className: \"form-control\",\n        id: \"name\",\n        placeholder: \"Name\"\n      })), __jsx(\"div\", {\n        className: \"col-md-6 form-group mb-3\"\n      }, __jsx(\"label\", {\n        className: \"form-label\"\n      }, \"Phone Number\"), __jsx(\"input\", {\n        onChange: this.handleChange,\n        type: \"text\",\n        value: phoneNumber,\n        name: \"phoneNumber\",\n        className: \"form-control\",\n        id: \"phoneNumber\",\n        placeholder: \"Phone Number\"\n      }))), __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-md-12 form-group mb-3\"\n      }, __jsx(\"label\", {\n        className: \"form-label\"\n      }, \"Address\"), __jsx(\"textarea\", {\n        onChange: this.handleChange,\n        value: address,\n        name: \"address\",\n        className: \"form-control\",\n        id: \"address\",\n        rows: \"3\"\n      }))), __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-md-6 form-group mb-3\"\n      }, __jsx(\"label\", {\n        className: \"form-label\"\n      }, \"City\"), __jsx(\"input\", {\n        onChange: this.handleChange,\n        type: \"city\",\n        value: \"city\",\n        name: \"city\",\n        className: \"form-control\",\n        id: \"city\",\n        placeholder: \"Name\"\n      })), __jsx(\"div\", {\n        className: \"col-md-6 form-group mb-3 \".concat(styles.stateCol)\n      }, __jsx(\"label\", {\n        className: \"form-label\"\n      }, \"State\"), __jsx(\"select\", {\n        onChange: this.handleChange,\n        className: styles.formSelect,\n        value: state,\n        name: \"state\",\n        id: \"state\"\n      }, __jsx(\"option\", {\n        selected: true\n      }, \"State\"), __jsx(\"option\", {\n        value: \"1\"\n      }, \"TamilNadu\"), __jsx(\"option\", {\n        value: \"2\"\n      }, \"Karnataka\"), __jsx(\"option\", {\n        value: \"3\"\n      }, \"Telungana\")))), __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-md-6 form-group mb-3\"\n      }, __jsx(\"label\", {\n        className: \"form-label\"\n      }, \"Pin Code\"), __jsx(\"input\", {\n        onChange: this.handleChange,\n        type: \"text\",\n        value: pincode,\n        name: \"pincode\",\n        className: \"form-control\",\n        id: \"pincode\",\n        placeholder: \"Pin Code\"\n      })), __jsx(\"div\", {\n        className: \"col-md-6 form-group mb-3\"\n      }, __jsx(\"label\", {\n        className: \"form-label\"\n      }, \"Landmark\"), __jsx(\"input\", {\n        onChange: this.handleChange,\n        type: \"text\",\n        value: landmark,\n        name: \"landmark\",\n        className: \"form-control\",\n        id: \"landmark\",\n        placeholder: \"Landmark\"\n      }))), __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"btn-group col-md-12 form-group mb-3 mt-3 \".concat(styles.place)\n      }, __jsx(\"p\", null, \"Type of Place\"), __jsx(\"div\", null, __jsx(\"label\", {\n        className: \"toggle-btn \".concat(styles.toggleBtn, \" \").concat(this.state.addressType === 0 ? styles.toggleBack : \"\"),\n        onClick: this.handleAddressType0\n      }, \"Home\"), __jsx(\"input\", {\n        type: \"radio\",\n        name: \"options\",\n        id: styles.option,\n        autoComplete: \"off\"\n      }), __jsx(\"label\", {\n        className: \"toggle-btn \".concat(styles.toggleBtn, \" \").concat(this.state.addressType === 1 ? styles.toggleBack : \"\"),\n        onClick: this.handleAddressType1\n      }, \"Office\"), __jsx(\"input\", {\n        type: \"radio\",\n        name: \"options\",\n        id: styles.option,\n        autoComplete: \"off\"\n      }), __jsx(\"label\", {\n        className: \"toggle-btn \".concat(styles.toggleBtn, \" \").concat(this.state.addressType === 2 ? styles.toggleBack : \"\"),\n        onClick: this.handleAddressType2\n      }, \"Other\"), __jsx(\"input\", {\n        type: \"radio\",\n        name: \"options\",\n        id: styles.option,\n        autoComplete: \"off\"\n      })))), __jsx(\"div\", {\n        className: \"row mt-3\"\n      }, __jsx(\"div\", {\n        className: \"col-md-5 form-group mb-3\"\n      }, __jsx(\"button\", {\n        onClick: this.handleAddAddress,\n        className: styles.save\n      }, \"Add Address\"))))), __jsx(\"div\", {\n        className: \"row mt-3\"\n      }, __jsx(\"div\", {\n        className: \"col-md-5 form-group mb-3\"\n      }, __jsx(\"button\", {\n        onClick: this.props.handleSubmitedOrder,\n        className: styles.save\n      }, \"save & place order\"))))));\n    }\n  }]);\n\n  return Address;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userDetail: state.auth.userDetails,\n    chooseMedicines: state.chooseMedicines,\n    prescription: state.prescription\n  };\n};\n\nexport default connect(mapStateToProps)(Address);","map":null,"metadata":{},"sourceType":"module"}