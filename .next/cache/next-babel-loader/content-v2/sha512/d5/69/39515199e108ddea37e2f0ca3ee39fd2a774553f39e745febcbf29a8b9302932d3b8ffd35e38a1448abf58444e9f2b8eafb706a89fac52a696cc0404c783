{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Surya\\\\Documents\\\\mr_med_frontend\\\\components\\\\MyCartFlow\\\\Stepper\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadPrescriptions from '../UploadPrescriptions/index';\nimport { Address } from \"../../UploadPrescription/Address/index\";\nimport Cart from '../CartPage/index';\nimport OrderSummarys from '../OrderSummarys/index';\nimport styles from \"./Stepper.module.scss\";\nimport PresPop from '../../UploadPrescription/UploadPrescriptions/PresPopup/index';\n\nvar CartStepper = /*#__PURE__*/function (_Component) {\n  _inherits(CartStepper, _Component);\n\n  var _super = _createSuper(CartStepper);\n\n  function CartStepper() {\n    var _this;\n\n    _classCallCheck(this, CartStepper);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleProceed\", function () {\n      _this.setState({\n        step: 2\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggle\", function () {\n      var modal = _this.state.modal;\n      modal = !modal;\n\n      _this.setState({\n        modal: modal\n      });\n    });\n\n    _this.state = {\n      steps: [],\n      modal: false\n    };\n    return _this;\n  }\n\n  _createClass(CartStepper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          steps = _this$props.steps,\n          currentStepNumber = _this$props.currentStepNumber;\n      var stepsState = steps.map(function (step, index) {\n        var stepObj = {};\n        stepObj.description = step;\n        stepObj.highlighted = index === 0 ? true : false;\n        stepObj.selected = index === 0 ? true : false;\n        stepObj.completed = false;\n        return stepObj;\n      });\n      var currentSteps = this.updateStep(currentStepNumber, stepsState);\n      this.setState({\n        steps: currentSteps\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var steps = this.state.steps;\n      var currentSteps = this.updateStep(this.props.currentStepNumber, steps);\n      if (prevProps.currentStepNumber !== this.props.currentStepNumber) this.setState({\n        steps: currentSteps\n      });\n    }\n  }, {\n    key: \"updateStep\",\n    value: function updateStep(stepNumber, steps) {\n      var newSteps = _toConsumableArray(steps);\n\n      var stepCounter = 0; // Completed - to add a check mark\n      // Selected - to fill step with color\n      // Highlighted - to make text of selected step bold\n\n      while (stepCounter < newSteps.length) {\n        // Current step\n        if (stepCounter === stepNumber) {\n          newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n            highlighted: true,\n            selected: true,\n            completed: false\n          });\n          stepCounter++;\n        } // Past step\n        else if (stepCounter < stepNumber) {\n            newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n              highlighted: false,\n              selected: true,\n              completed: true\n            });\n            stepCounter++;\n          } // Future step\n          else {\n              newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n                highlighted: false,\n                selected: false,\n                completed: false\n              });\n              stepCounter++;\n            }\n      }\n\n      return newSteps;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          direction = _this$props2.direction,\n          _this$props2$stepColo = _this$props2.stepColor,\n          stepColor = _this$props2$stepColo === void 0 ? \"violet\" : _this$props2$stepColo;\n      var steps = this.state.steps;\n      var stepsJSX = steps.map(function (step, index) {\n        return __jsx(\"div\", {\n          className: styles.stepWrapper,\n          key: index,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 9\n          }\n        }, __jsx(\"div\", {\n          className: \"\".concat(styles.stepNumber, \" \").concat(step.selected ? \"\".concat(styles.stepNumberSelected) : \"\".concat(styles.stepNumberDisabled)),\n          style: {\n            background: \"\".concat(step.selected ? stepColor : \"none\")\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }\n        }, __jsx(\"span\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }\n        }, __jsx(\"div\", {\n          className: styles.circle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 23\n          }\n        })), step.completed ? \"\" : \"\"), __jsx(\"div\", {\n          className: \"\".concat(styles.stepDescription, \" \").concat(step.highlighted && \"\".concat(styles.stepDescriptionActive)),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }\n        }, step.description), __jsx(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }\n        }, __jsx(\"p\", {\n          className: styles.stepName,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }\n        }, \"Step \", index + 1)), index !== steps.length - 1 && __jsx(\"div\", {\n          className: \"\".concat(styles['dividerLine'], \" \").concat(styles[\"dividerLine_\".concat(steps.length)], \" \").concat(step.completed ? \"\".concat(styles.borderColor) : \"\"),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }\n        }));\n      });\n      var st = \"stepperWrapper\".concat(direction);\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: styles[st],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, stepsJSX), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      }, this.props.currentStepNumber === 0 ? __jsx(UploadPrescriptions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 47\n        }\n      }) : \"\", this.props.currentStepNumber === 1 ? __jsx(Cart, {\n        handleProceed: this.handleProceed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 47\n        }\n      }) : \"\", this.props.currentStepNumber === 2 ? __jsx(Address, {\n        handleProceed: this.handleProceed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 47\n        }\n      }) : \"\", this.props.currentStepNumber === 3 ? __jsx(OrderSummarys, {\n        handleSubmitedOrder: this.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 47\n        }\n      }) : \"\"), __jsx(PresPop, {\n        modal: this.state.modal,\n        toggle: this.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return CartStepper;\n}(Component);\n\nexport { CartStepper as default };\nCartStepper.propTypes = {\n  direction: PropTypes.string.isRequired,\n  currentStepNumber: PropTypes.number.isRequired,\n  steps: PropTypes.array.isRequired,\n  stepColor: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["C:/Users/Surya/Documents/mr_med_frontend/components/MyCartFlow/Stepper/index.js"],"names":["React","Component","PropTypes","UploadPrescriptions","Address","Cart","OrderSummarys","styles","PresPop","CartStepper","setState","step","modal","state","steps","props","currentStepNumber","stepsState","map","index","stepObj","description","highlighted","selected","completed","currentSteps","updateStep","prevProps","stepNumber","newSteps","stepCounter","length","direction","stepColor","stepsJSX","stepWrapper","stepNumberSelected","stepNumberDisabled","background","circle","stepDescription","stepDescriptionActive","stepName","borderColor","st","handleProceed","toggle","propTypes","string","isRequired","number","array"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport UploadPrescriptions from '../UploadPrescriptions/index';\r\nimport {Address} from \"../../UploadPrescription/Address/index\";\r\nimport Cart from '../CartPage/index';\r\nimport OrderSummarys from '../OrderSummarys/index';\r\nimport styles from \"./Stepper.module.scss\";\r\nimport PresPop from '../../UploadPrescription/UploadPrescriptions/PresPopup/index';\r\n\r\nexport default class CartStepper extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      steps: [],\r\n      modal: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { steps, currentStepNumber } = this.props;\r\n\r\n    const stepsState = steps.map((step, index) => {\r\n      const stepObj = {};\r\n      stepObj.description = step;\r\n      stepObj.highlighted = index === 0 ? true : false;\r\n      stepObj.selected = index === 0 ? true : false;\r\n      stepObj.completed = false;\r\n      return stepObj;\r\n    });\r\n\r\n    const currentSteps = this.updateStep(currentStepNumber, stepsState);\r\n\r\n    this.setState({\r\n      steps: currentSteps\r\n    });\r\n  }\r\n  handleProceed = () => {\r\n    this.setState({\r\n      step: 2\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { steps } = this.state;\r\n    const currentSteps = this.updateStep(this.props.currentStepNumber, steps);\r\n\r\n    if (prevProps.currentStepNumber !== this.props.currentStepNumber)\r\n      this.setState({\r\n        steps: currentSteps\r\n      });\r\n  }\r\n\r\n  updateStep(stepNumber, steps) {\r\n    const newSteps = [...steps];\r\n    let stepCounter = 0;\r\n\r\n    // Completed - to add a check mark\r\n    // Selected - to fill step with color\r\n    // Highlighted - to make text of selected step bold\r\n\r\n    while (stepCounter < newSteps.length) {\r\n      // Current step\r\n      if (stepCounter === stepNumber) {\r\n        newSteps[stepCounter] = {\r\n          ...newSteps[stepCounter],\r\n          highlighted: true,\r\n          selected: true,\r\n          completed: false\r\n        };\r\n        stepCounter++;\r\n      }\r\n      // Past step\r\n      else if (stepCounter < stepNumber) {\r\n        newSteps[stepCounter] = {\r\n          ...newSteps[stepCounter],\r\n          highlighted: false,\r\n          selected: true,\r\n          completed: true\r\n        };\r\n        stepCounter++;\r\n      }\r\n      // Future step\r\n      else {\r\n        newSteps[stepCounter] = {\r\n          ...newSteps[stepCounter],\r\n          highlighted: false,\r\n          selected: false,\r\n          completed: false\r\n        };\r\n        stepCounter++;\r\n      }\r\n    }\r\n\r\n    return newSteps;\r\n  }\r\n\r\n  toggle = () => {\r\n    let { modal } = this.state;\r\n    modal = !modal\r\n    this.setState({\r\n        modal\r\n    });\r\n}\r\n\r\n  render() {\r\n    const { direction, stepColor=\"violet\" } = this.props;\r\n    const { steps } = this.state;\r\n    const stepsJSX = steps.map((step, index) => {\r\n      return (\r\n        <div className={styles.stepWrapper} key={index}>\r\n              <div\r\n                className={`${styles.stepNumber} ${\r\n                  step.selected ? `${styles.stepNumberSelected}` : `${styles.stepNumberDisabled}`\r\n                }`}\r\n                style={{ background: `${step.selected ?  stepColor : \"none\"}` }}\r\n              >\r\n                <span><div className={styles.circle}></div></span>\r\n                {step.completed  ? \"\" : \"\"}\r\n              </div>\r\n              <div\r\n                className={`${styles.stepDescription} ${step.highlighted &&\r\n                  `${styles.stepDescriptionActive}`}`}\r\n              >\r\n                {step.description}\r\n              </div>\r\n              <div>\r\n                <p className={styles.stepName}>Step {index+1}</p>\r\n              </div>\r\n            {index !== steps.length - 1 && (\r\n              <div className={`${styles['dividerLine']} ${styles[`dividerLine_${steps.length}`]} ${step.completed ? `${styles.borderColor}` :\"\"}`} />\r\n            )}\r\n        </div>\r\n        \r\n      );\r\n    });\r\n    const st = `stepperWrapper${direction}`\r\n    return (\r\n      <>\r\n        <div className={styles[st]}>\r\n        {stepsJSX}\r\n        </div>\r\n        <div>\r\n          {this.props.currentStepNumber===0 ? <UploadPrescriptions/> : \"\"}\r\n          {this.props.currentStepNumber===1 ? <Cart handleProceed={this.handleProceed}/> : \"\"}\r\n          {this.props.currentStepNumber===2 ? <Address handleProceed={this.handleProceed}/> : \"\"}\r\n          {this.props.currentStepNumber===3 ? <OrderSummarys handleSubmitedOrder={this.toggle}/> : \"\"}\r\n        </div>\r\n        <PresPop modal={this.state.modal} toggle={this.toggle} />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nCartStepper.propTypes = {\r\n  direction: PropTypes.string.isRequired,\r\n  currentStepNumber: PropTypes.number.isRequired,\r\n  steps: PropTypes.array.isRequired,\r\n  stepColor: PropTypes.string.isRequired\r\n};"]},"metadata":{},"sourceType":"module"}