{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport UploadPrescriptions from '../UploadPrescriptions/index';\nimport { Address } from \"../Address/index\";\nimport Cart from '../CartPage/index';\nimport OrderSummarys from '../OrderSummarys/index';\nimport styles from \"./Stepper.module.scss\";\nexport default class CartStepper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      steps: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      steps,\n      currentStepNumber\n    } = this.props;\n    const stepsState = steps.map((step, index) => {\n      const stepObj = {};\n      stepObj.description = step;\n      stepObj.highlighted = index === 0 ? true : false;\n      stepObj.selected = index === 0 ? true : false;\n      stepObj.completed = false;\n      return stepObj;\n    });\n    const currentSteps = this.updateStep(currentStepNumber, stepsState);\n    this.setState({\n      steps: currentSteps\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      steps\n    } = this.state;\n    const currentSteps = this.updateStep(this.props.currentStepNumber, steps);\n    if (prevProps.currentStepNumber !== this.props.currentStepNumber) this.setState({\n      steps: currentSteps\n    });\n  }\n\n  updateStep(stepNumber, steps) {\n    const newSteps = [...steps];\n    let stepCounter = 0; // Completed - to add a check mark\n    // Selected - to fill step with color\n    // Highlighted - to make text of selected step bold\n\n    while (stepCounter < newSteps.length) {\n      // Current step\n      if (stepCounter === stepNumber) {\n        newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n          highlighted: true,\n          selected: true,\n          completed: false\n        });\n        stepCounter++;\n      } // Past step\n      else if (stepCounter < stepNumber) {\n          newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n            highlighted: false,\n            selected: true,\n            completed: true\n          });\n          stepCounter++;\n        } // Future step\n        else {\n            newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n              highlighted: false,\n              selected: false,\n              completed: false\n            });\n            stepCounter++;\n          }\n    }\n\n    return newSteps;\n  }\n\n  render() {\n    const {\n      direction,\n      stepColor = \"violet\"\n    } = this.props;\n    const {\n      steps\n    } = this.state;\n    const stepsJSX = steps.map((step, index) => {\n      return __jsx(\"div\", {\n        className: styles.stepWrapper,\n        key: index\n      }, __jsx(\"div\", {\n        className: `${styles.stepNumber} ${step.selected ? `${styles.stepNumberSelected}` : `${styles.stepNumberDisabled}`}`,\n        style: {\n          background: `${step.selected ? stepColor : \"none\"}`\n        }\n      }, __jsx(\"span\", null, __jsx(\"div\", {\n        className: styles.circle\n      })), step.completed ? \"\" : \"\"), __jsx(\"div\", {\n        className: `${styles.stepDescription} ${step.highlighted && `${styles.stepDescriptionActive}`}`\n      }, step.description), __jsx(\"div\", null, __jsx(\"p\", {\n        className: styles.stepName\n      }, \"Step \", index + 1)), index !== steps.length - 1 && __jsx(\"div\", {\n        className: `${styles['dividerLine']} ${styles[`dividerLine_${steps.length}`]} ${step.completed ? `${styles.borderColor}` : \"\"}`\n      }));\n    });\n    const st = `stepperWrapper${direction}`;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: styles[st]\n    }, stepsJSX), __jsx(\"div\", null, this.props.currentStepNumber === 1 ? __jsx(UploadPrescriptions, null) : \"\", this.props.currentStepNumber === 0 ? __jsx(Cart, null) : \"\", this.props.currentStepNumber === 2 ? __jsx(Address, null) : \"\", this.props.currentStepNumber === 3 ? __jsx(OrderSummarys, null) : \"\"));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}