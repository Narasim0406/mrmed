{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport UploadPrescriptions from '../UploadPrescriptions/index';\nimport { Address } from \"../Address/index\";\nimport ChooseMedicine from '../ChooseMedicine/index';\nimport { Payment } from '../Payment/index';\nimport styles from \"./Stepper.module.scss\";\n\nvar Stepper = /*#__PURE__*/function (_Component) {\n  _inherits(Stepper, _Component);\n\n  var _super = _createSuper(Stepper);\n\n  function Stepper() {\n    var _this;\n\n    _classCallCheck(this, Stepper);\n\n    _this = _super.call(this);\n    _this.state = {\n      steps: []\n    };\n    return _this;\n  }\n\n  _createClass(Stepper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          steps = _this$props.steps,\n          currentStepNumber = _this$props.currentStepNumber;\n      var stepsState = steps.map(function (step, index) {\n        var stepObj = {};\n        stepObj.description = step;\n        stepObj.highlighted = index === 0 ? true : false;\n        stepObj.selected = index === 0 ? true : false;\n        stepObj.completed = false;\n        return stepObj;\n      });\n      var currentSteps = this.updateStep(currentStepNumber, stepsState);\n      this.setState({\n        steps: currentSteps\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var steps = this.state.steps;\n      var currentSteps = this.updateStep(this.props.currentStepNumber, steps);\n      if (prevProps.currentStepNumber !== this.props.currentStepNumber) this.setState({\n        steps: currentSteps\n      });\n    }\n  }, {\n    key: \"updateStep\",\n    value: function updateStep(stepNumber, steps) {\n      var newSteps = _toConsumableArray(steps);\n\n      var stepCounter = 0; // Completed - to add a check mark\n      // Selected - to fill step with color\n      // Highlighted - to make text of selected step bold\n\n      while (stepCounter < newSteps.length) {\n        // Current step\n        if (stepCounter === stepNumber) {\n          newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n            highlighted: true,\n            selected: true,\n            completed: false\n          });\n          stepCounter++;\n        } // Past step\n        else if (stepCounter < stepNumber) {\n            newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n              highlighted: false,\n              selected: true,\n              completed: true\n            });\n            stepCounter++;\n          } // Future step\n          else {\n              newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n                highlighted: false,\n                selected: false,\n                completed: false\n              });\n              stepCounter++;\n            }\n      }\n\n      return newSteps;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          direction = _this$props2.direction,\n          _this$props2$stepColo = _this$props2.stepColor,\n          stepColor = _this$props2$stepColo === void 0 ? \"violet\" : _this$props2$stepColo;\n      var steps = this.state.steps;\n      var stepsJSX = steps.map(function (step, index) {\n        return __jsx(\"div\", {\n          className: styles.stepWrapper,\n          key: index\n        }, __jsx(\"div\", {\n          className: \"\".concat(styles.stepNumber, \" \").concat(step.selected ? \"\".concat(styles.stepNumberSelected) : \"\".concat(styles.stepNumberDisabled)),\n          style: {\n            background: \"\".concat(step.selected ? stepColor : \"none\")\n          }\n        }, __jsx(\"span\", null, __jsx(\"div\", {\n          className: styles.circle\n        })), step.completed ? \"\" : \"\"), __jsx(\"div\", {\n          className: \"\".concat(styles.stepDescription, \" \").concat(step.highlighted && \"\".concat(styles.stepDescriptionActive))\n        }, step.description), __jsx(\"div\", null, __jsx(\"p\", {\n          className: styles.stepName\n        }, \"Step \", index + 1)), index !== steps.length - 1 && __jsx(\"div\", {\n          className: \"\".concat(styles['dividerLine'], \" \").concat(styles[\"dividerLine_\".concat(steps.length)], \" \").concat(step.completed ? \"\".concat(styles.borderColor) : \"\")\n        }));\n      });\n      var st = \"stepperWrapper\".concat(direction);\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: styles[st]\n      }, stepsJSX), __jsx(\"div\", null, this.props.currentStepNumber === 0 ? __jsx(UploadPrescriptions, null) : \"\", this.props.currentStepNumber === 1 ? __jsx(ChooseMedicine, null) : \"\", this.props.currentStepNumber === 2 ? __jsx(Address, null) : \"\"));\n    }\n  }]);\n\n  return Stepper;\n}(Component);\n\nexport { Stepper as default };","map":null,"metadata":{},"sourceType":"module"}