{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Surya\\\\Documents\\\\mr_med_frontend\\\\components\\\\UploadPrescription\\\\Stepper\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadPrescriptions from '../UploadPrescriptions/index';\nimport { Address } from \"../Address/index\";\nimport ChooseMedicine from '../ChooseMedicine/index';\nimport { Payment } from '../Payment/index';\nimport styles from \"./Stepper.module.scss\";\nexport default class Stepper extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"handleStepper\", () => {\n      this.props.handleStepper();\n    });\n\n    this.state = {\n      steps: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      steps,\n      currentStepNumber\n    } = this.props;\n    const stepsState = steps.map((step, index) => {\n      const stepObj = {};\n      stepObj.description = step;\n      stepObj.highlighted = index === 0 ? true : false;\n      stepObj.selected = index === 0 ? true : false;\n      stepObj.completed = false;\n      return stepObj;\n    });\n    const currentSteps = this.updateStep(currentStepNumber, stepsState);\n    this.setState({\n      steps: currentSteps\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      steps\n    } = this.state;\n    const currentSteps = this.updateStep(this.props.currentStepNumber, steps);\n    if (prevProps.currentStepNumber !== this.props.currentStepNumber) this.setState({\n      steps: currentSteps\n    });\n  }\n\n  updateStep(stepNumber, steps) {\n    const newSteps = [...steps];\n    let stepCounter = 0; // Completed - to add a check mark\n    // Selected - to fill step with color\n    // Highlighted - to make text of selected step bold\n\n    while (stepCounter < newSteps.length) {\n      // Current step\n      if (stepCounter === stepNumber) {\n        newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n          highlighted: true,\n          selected: true,\n          completed: false\n        });\n        stepCounter++;\n      } // Past step\n      else if (stepCounter < stepNumber) {\n          newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n            highlighted: false,\n            selected: true,\n            completed: true\n          });\n          stepCounter++;\n        } // Future step\n        else {\n            newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n              highlighted: false,\n              selected: false,\n              completed: false\n            });\n            stepCounter++;\n          }\n    }\n\n    return newSteps;\n  }\n\n  render() {\n    const {\n      direction,\n      stepColor = \"violet\"\n    } = this.props;\n    const {\n      steps\n    } = this.state;\n    const stepsJSX = steps.map((step, index) => {\n      return __jsx(\"div\", {\n        className: styles.stepWrapper,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        className: `${styles.stepNumber} ${step.selected ? `${styles.stepNumberSelected}` : `${styles.stepNumberDisabled}`}`,\n        style: {\n          background: `${step.selected ? stepColor : \"none\"}`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: styles.circle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 23\n        }\n      })), step.completed ? \"\" : \"\"), __jsx(\"div\", {\n        className: `${styles.stepDescription} ${step.highlighted && `${styles.stepDescriptionActive}`}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }\n      }, step.description), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }\n      }, __jsx(\"p\", {\n        className: styles.stepName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, \"Step \", index + 1)), index !== steps.length - 1 && __jsx(\"div\", {\n        className: `${styles['dividerLine']} ${styles[`dividerLine_${steps.length}`]} ${step.completed ? `${styles.borderColor}` : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }));\n    });\n    const st = `stepperWrapper${direction}`;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: styles[st],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, stepsJSX), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, this.props.currentStepNumber === 0 ? __jsx(UploadPrescriptions, {\n      handleStep: this.handleStepper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 47\n      }\n    }) : \"\", this.props.currentStepNumber === 1 ? __jsx(ChooseMedicine, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 48\n      }\n    }) : \"\", this.props.currentStepNumber === 2 ? __jsx(Address, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 47\n      }\n    }) : \"\"));\n  }\n\n}\nStepper.propTypes = {\n  direction: PropTypes.string.isRequired,\n  currentStepNumber: PropTypes.number.isRequired,\n  steps: PropTypes.array.isRequired,\n  stepColor: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["C:/Users/Surya/Documents/mr_med_frontend/components/UploadPrescription/Stepper/index.js"],"names":["React","Component","PropTypes","UploadPrescriptions","Address","ChooseMedicine","Payment","styles","Stepper","constructor","props","handleStepper","state","steps","componentDidMount","currentStepNumber","stepsState","map","step","index","stepObj","description","highlighted","selected","completed","currentSteps","updateStep","setState","componentDidUpdate","prevProps","stepNumber","newSteps","stepCounter","length","render","direction","stepColor","stepsJSX","stepWrapper","stepNumberSelected","stepNumberDisabled","background","circle","stepDescription","stepDescriptionActive","stepName","borderColor","st","propTypes","string","isRequired","number","array"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport UploadPrescriptions from '../UploadPrescriptions/index';\r\nimport {Address} from \"../Address/index\";\r\nimport ChooseMedicine from '../ChooseMedicine/index';\r\nimport {Payment} from '../Payment/index';\r\n\r\nimport styles from \"./Stepper.module.scss\";\r\n\r\nexport default class Stepper extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      steps: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { steps, currentStepNumber } = this.props;\r\n\r\n    const stepsState = steps.map((step, index) => {\r\n      const stepObj = {};\r\n      stepObj.description = step;\r\n      stepObj.highlighted = index === 0 ? true : false;\r\n      stepObj.selected = index === 0 ? true : false;\r\n      stepObj.completed = false;\r\n      return stepObj;\r\n    });\r\n\r\n    const currentSteps = this.updateStep(currentStepNumber, stepsState);\r\n\r\n    this.setState({\r\n      steps: currentSteps\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { steps } = this.state;\r\n    const currentSteps = this.updateStep(this.props.currentStepNumber, steps);\r\n\r\n    if (prevProps.currentStepNumber !== this.props.currentStepNumber)\r\n      this.setState({\r\n        steps: currentSteps\r\n      });\r\n  }\r\n\r\n  updateStep(stepNumber, steps) {\r\n    const newSteps = [...steps];\r\n    let stepCounter = 0;\r\n\r\n    // Completed - to add a check mark\r\n    // Selected - to fill step with color\r\n    // Highlighted - to make text of selected step bold\r\n\r\n    while (stepCounter < newSteps.length) {\r\n      // Current step\r\n      if (stepCounter === stepNumber) {\r\n        newSteps[stepCounter] = {\r\n          ...newSteps[stepCounter],\r\n          highlighted: true,\r\n          selected: true,\r\n          completed: false\r\n        };\r\n        stepCounter++;\r\n      }\r\n      // Past step\r\n      else if (stepCounter < stepNumber) {\r\n        newSteps[stepCounter] = {\r\n          ...newSteps[stepCounter],\r\n          highlighted: false,\r\n          selected: true,\r\n          completed: true\r\n        };\r\n        stepCounter++;\r\n      }\r\n      // Future step\r\n      else {\r\n        newSteps[stepCounter] = {\r\n          ...newSteps[stepCounter],\r\n          highlighted: false,\r\n          selected: false,\r\n          completed: false\r\n        };\r\n        stepCounter++;\r\n      }\r\n    }\r\n\r\n    return newSteps;\r\n  }\r\n\r\n  handleStepper = () => {\r\n    this.props.handleStepper();\r\n  }\r\n\r\n  render() {\r\n    const { direction, stepColor=\"violet\" } = this.props;\r\n    const { steps } = this.state;\r\n    const stepsJSX = steps.map((step, index) => {\r\n      return (\r\n        <div className={styles.stepWrapper} key={index}>\r\n              <div\r\n                className={`${styles.stepNumber} ${\r\n                  step.selected ? `${styles.stepNumberSelected}` : `${styles.stepNumberDisabled}`\r\n                }`}\r\n                style={{ background: `${step.selected ?  stepColor : \"none\"}` }}\r\n              >\r\n                <span><div className={styles.circle}></div></span>\r\n                {step.completed  ? \"\" : \"\"}\r\n              </div>\r\n              <div\r\n                className={`${styles.stepDescription} ${step.highlighted &&\r\n                  `${styles.stepDescriptionActive}`}`}\r\n              >\r\n                {step.description}\r\n              </div>\r\n              <div>\r\n                <p className={styles.stepName}>Step {index+1}</p>\r\n              </div>\r\n            {index !== steps.length - 1 && (\r\n              <div className={`${styles['dividerLine']} ${styles[`dividerLine_${steps.length}`]} ${step.completed ? `${styles.borderColor}` :\"\"}`} />\r\n            )}\r\n        </div>\r\n        \r\n      );\r\n    });\r\n    const st = `stepperWrapper${direction}`\r\n    return (\r\n      <>\r\n        <div className={styles[st]}>\r\n        {stepsJSX}\r\n        </div>\r\n        <div>\r\n          {this.props.currentStepNumber===0 ? <UploadPrescriptions handleStep={this.handleStepper}/> : \"\"}\r\n          {this.props.currentStepNumber===1 ?  <ChooseMedicine /> : \"\"}\r\n          {this.props.currentStepNumber===2 ? <Address /> : \"\"}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nStepper.propTypes = {\r\n  direction: PropTypes.string.isRequired,\r\n  currentStepNumber: PropTypes.number.isRequired,\r\n  steps: PropTypes.array.isRequired,\r\n  stepColor: PropTypes.string.isRequired\r\n};"]},"metadata":{},"sourceType":"module"}