{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Surya\\\\Documents\\\\mr_med_frontend\\\\components\\\\UploadPrescription\\\\Stepper\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport UploadPrescriptions from '../UploadPrescriptions/index';\nimport { Address } from \"../Address/index\";\nimport ChooseMedicine from '../ChooseMedicine/index';\nimport { Payment } from '../Payment/index';\nimport styles from \"./Stepper.module.scss\";\n\nvar Stepper = /*#__PURE__*/function (_Component) {\n  _inherits(Stepper, _Component);\n\n  var _super = _createSuper(Stepper);\n\n  function Stepper() {\n    var _this;\n\n    _classCallCheck(this, Stepper);\n\n    _this = _super.call(this);\n    _this.state = {\n      steps: []\n    };\n    return _this;\n  }\n\n  _createClass(Stepper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          steps = _this$props.steps,\n          currentStepNumber = _this$props.currentStepNumber;\n      var stepsState = steps.map(function (step, index) {\n        var stepObj = {};\n        stepObj.description = step;\n        stepObj.highlighted = index === 0 ? true : false;\n        stepObj.selected = index === 0 ? true : false;\n        stepObj.completed = false;\n        return stepObj;\n      });\n      var currentSteps = this.updateStep(currentStepNumber, stepsState);\n      this.setState({\n        steps: currentSteps\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var steps = this.state.steps;\n      var currentSteps = this.updateStep(this.props.currentStepNumber, steps);\n      if (prevProps.currentStepNumber !== this.props.currentStepNumber) this.setState({\n        steps: currentSteps\n      });\n    }\n  }, {\n    key: \"updateStep\",\n    value: function updateStep(stepNumber, steps) {\n      var newSteps = _toConsumableArray(steps);\n\n      var stepCounter = 0; // Completed - to add a check mark\n      // Selected - to fill step with color\n      // Highlighted - to make text of selected step bold\n\n      while (stepCounter < newSteps.length) {\n        // Current step\n        if (stepCounter === stepNumber) {\n          newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n            highlighted: true,\n            selected: true,\n            completed: false\n          });\n          stepCounter++;\n        } // Past step\n        else if (stepCounter < stepNumber) {\n            newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n              highlighted: false,\n              selected: true,\n              completed: true\n            });\n            stepCounter++;\n          } // Future step\n          else {\n              newSteps[stepCounter] = _objectSpread(_objectSpread({}, newSteps[stepCounter]), {}, {\n                highlighted: false,\n                selected: false,\n                completed: false\n              });\n              stepCounter++;\n            }\n      }\n\n      return newSteps;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          direction = _this$props2.direction,\n          _this$props2$stepColo = _this$props2.stepColor,\n          stepColor = _this$props2$stepColo === void 0 ? \"violet\" : _this$props2$stepColo;\n      var steps = this.state.steps;\n      var stepsJSX = steps.map(function (step, index) {\n        return __jsx(\"div\", {\n          className: styles.stepWrapper,\n          key: index,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 9\n          }\n        }, __jsx(\"div\", {\n          className: \"\".concat(styles.stepNumber, \" \").concat(step.selected ? \"\".concat(styles.stepNumberSelected) : \"\".concat(styles.stepNumberDisabled)),\n          style: {\n            background: \"\".concat(step.selected ? stepColor : \"none\")\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }\n        }, __jsx(\"span\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }\n        }, __jsx(\"div\", {\n          className: styles.circle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 23\n          }\n        })), step.completed ? \"\" : \"\"), __jsx(\"div\", {\n          className: \"\".concat(styles.stepDescription, \" \").concat(step.highlighted && \"\".concat(styles.stepDescriptionActive)),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }\n        }, step.description), __jsx(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }\n        }, __jsx(\"p\", {\n          className: styles.stepName,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }\n        }, \"Step \", index + 1)), index !== steps.length - 1 && __jsx(\"div\", {\n          className: \"\".concat(styles['dividerLine'], \" \").concat(styles[\"dividerLine_\".concat(steps.length)], \" \").concat(step.completed ? \"\".concat(styles.borderColor) : \"\"),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }\n        }));\n      });\n      var st = \"stepperWrapper\".concat(direction);\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: styles[st],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      }, stepsJSX), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }, this.props.currentStepNumber === 0 ? __jsx(UploadPrescriptions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 47\n        }\n      }) : \"\", this.props.currentStepNumber === 1 ? __jsx(ChooseMedicine, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 48\n        }\n      }) : \"\", this.props.currentStepNumber === 2 ? __jsx(Address, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 47\n        }\n      }) : \"\"));\n    }\n  }]);\n\n  return Stepper;\n}(Component);\n\nexport { Stepper as default };\nStepper.propTypes = {\n  direction: PropTypes.string.isRequired,\n  currentStepNumber: PropTypes.number.isRequired,\n  steps: PropTypes.array.isRequired,\n  stepColor: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["C:/Users/Surya/Documents/mr_med_frontend/components/UploadPrescription/Stepper/index.js"],"names":["React","Component","PropTypes","UploadPrescriptions","Address","ChooseMedicine","Payment","styles","Stepper","state","steps","props","currentStepNumber","stepsState","map","step","index","stepObj","description","highlighted","selected","completed","currentSteps","updateStep","setState","prevProps","stepNumber","newSteps","stepCounter","length","direction","stepColor","stepsJSX","stepWrapper","stepNumberSelected","stepNumberDisabled","background","circle","stepDescription","stepDescriptionActive","stepName","borderColor","st","propTypes","string","isRequired","number","array"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport UploadPrescriptions from '../UploadPrescriptions/index';\r\nimport {Address} from \"../Address/index\";\r\nimport ChooseMedicine from '../ChooseMedicine/index';\r\nimport {Payment} from '../Payment/index';\r\n\r\nimport styles from \"./Stepper.module.scss\";\r\n\r\nexport default class Stepper extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      steps: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { steps, currentStepNumber } = this.props;\r\n\r\n    const stepsState = steps.map((step, index) => {\r\n      const stepObj = {};\r\n      stepObj.description = step;\r\n      stepObj.highlighted = index === 0 ? true : false;\r\n      stepObj.selected = index === 0 ? true : false;\r\n      stepObj.completed = false;\r\n      return stepObj;\r\n    });\r\n\r\n    const currentSteps = this.updateStep(currentStepNumber, stepsState);\r\n\r\n    this.setState({\r\n      steps: currentSteps\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { steps } = this.state;\r\n    const currentSteps = this.updateStep(this.props.currentStepNumber, steps);\r\n\r\n    if (prevProps.currentStepNumber !== this.props.currentStepNumber)\r\n      this.setState({\r\n        steps: currentSteps\r\n      });\r\n  }\r\n\r\n  updateStep(stepNumber, steps) {\r\n    const newSteps = [...steps];\r\n    let stepCounter = 0;\r\n\r\n    // Completed - to add a check mark\r\n    // Selected - to fill step with color\r\n    // Highlighted - to make text of selected step bold\r\n\r\n    while (stepCounter < newSteps.length) {\r\n      // Current step\r\n      if (stepCounter === stepNumber) {\r\n        newSteps[stepCounter] = {\r\n          ...newSteps[stepCounter],\r\n          highlighted: true,\r\n          selected: true,\r\n          completed: false\r\n        };\r\n        stepCounter++;\r\n      }\r\n      // Past step\r\n      else if (stepCounter < stepNumber) {\r\n        newSteps[stepCounter] = {\r\n          ...newSteps[stepCounter],\r\n          highlighted: false,\r\n          selected: true,\r\n          completed: true\r\n        };\r\n        stepCounter++;\r\n      }\r\n      // Future step\r\n      else {\r\n        newSteps[stepCounter] = {\r\n          ...newSteps[stepCounter],\r\n          highlighted: false,\r\n          selected: false,\r\n          completed: false\r\n        };\r\n        stepCounter++;\r\n      }\r\n    }\r\n\r\n    return newSteps;\r\n  }\r\n\r\n  render() {\r\n    const { direction, stepColor=\"violet\" } = this.props;\r\n    const { steps } = this.state;\r\n    const stepsJSX = steps.map((step, index) => {\r\n      return (\r\n        <div className={styles.stepWrapper} key={index}>\r\n              <div\r\n                className={`${styles.stepNumber} ${\r\n                  step.selected ? `${styles.stepNumberSelected}` : `${styles.stepNumberDisabled}`\r\n                }`}\r\n                style={{ background: `${step.selected ?  stepColor : \"none\"}` }}\r\n              >\r\n                <span><div className={styles.circle}></div></span>\r\n                {step.completed  ? \"\" : \"\"}\r\n              </div>\r\n              <div\r\n                className={`${styles.stepDescription} ${step.highlighted &&\r\n                  `${styles.stepDescriptionActive}`}`}\r\n              >\r\n                {step.description}\r\n              </div>\r\n              <div>\r\n                <p className={styles.stepName}>Step {index+1}</p>\r\n              </div>\r\n            {index !== steps.length - 1 && (\r\n              <div className={`${styles['dividerLine']} ${styles[`dividerLine_${steps.length}`]} ${step.completed ? `${styles.borderColor}` :\"\"}`} />\r\n            )}\r\n        </div>\r\n        \r\n      );\r\n    });\r\n    const st = `stepperWrapper${direction}`\r\n    return (\r\n      <>\r\n        <div className={styles[st]}>\r\n        {stepsJSX}\r\n        </div>\r\n        <div>\r\n          {this.props.currentStepNumber===0 ? <UploadPrescriptions/> : \"\"}\r\n          {this.props.currentStepNumber===1 ?  <ChooseMedicine/> : \"\"}\r\n          {this.props.currentStepNumber===2 ? <Address/> : \"\"}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nStepper.propTypes = {\r\n  direction: PropTypes.string.isRequired,\r\n  currentStepNumber: PropTypes.number.isRequired,\r\n  steps: PropTypes.array.isRequired,\r\n  stepColor: PropTypes.string.isRequired\r\n};"]},"metadata":{},"sourceType":"module"}